C51 COMPILER V9.59.0.0   HYBSCH                                                            06/06/2021 18:00:00 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE HYBSCH
OBJECT MODULE PLACED IN .\OutHex\HybSCH.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Sources\HybSCH.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Lis
                    -tings\HybSCH.lst) TABS(2) OBJECT(.\OutHex\HybSCH.obj)

line level    source

   1          #include "./Headers/PreMacro.h"
   2          #include "./Headers/HybSCH.h"
   3          
   4          //调度器错误代码
   5          static u8 hsch_error_code;
   6          static u8 last_error_code;
   7          
   8          //错误代码输出超时
   9          static u16 error_tick_count;
  10          
  11          extern u16 soft_delay_count;
  12          
  13          /**
  14           * 随机种子
  15           */
  16          u16 random_seeds = 0;
  17          
  18          /**
  19           * 任务结构体
  20           * @field func   任务函数
  21           * @field delay  初次执行延时
  22           * @field period 执行周期间隔
  23           * @field exec_once 是否已经执行了一次
  24           * @field co_cp  合作/抢占标志
  25           *               合作：1
  26           *               抢占：0
  27           */
  28          typedef xdata struct
  29          {
  30              Action func;
  31              int delay;
  32              u16 period;
  33              u8 runme;
  34              u8 co_cp;
  35              u8 exec_once;
  36              void *param;
  37          } hsTask;
  38          
  39          //任务集合
  40          hsTask hsch_tasks[SCH_MAX_TASKS];
  41          
  42          /**
  43           * 使单片机进入休眠
  44           */
  45          void hsch_to_sleep(void);
  46          
  47          /**
  48           * 扫描任务集合并执行
  49           */
  50          void hsch_dispatch_tasks(void)
  51          {
  52   1          u8 i = 0;
  53   1          for (i = 0; i < SCH_MAX_TASKS; i += 1)
  54   1          {
C51 COMPILER V9.59.0.0   HYBSCH                                                            06/06/2021 18:00:00 PAGE 2   

  55   2              if (hsch_tasks[i].runme > 0 && hsch_tasks[i].co_cp && hsch_tasks[i].func != NULL)
  56   2              {
  57   3                  hsch_tasks[i].runme -= 1;
  58   3                  hsch_tasks[i].func(hsch_tasks[i].param);
  59   3                  // 注销一次性函数
  60   3                  if (hsch_tasks[i].period == 0 && hsch_tasks[i].runme == 0)
  61   3                  {
  62   4                      hsch_delete_task(i);
  63   4                  }
  64   3              }
  65   2          }
  66   1          hsch_report_status();
  67   1          hsch_to_sleep();
  68   1      }
  69          
  70          /**
  71           * 添加任务
  72           * @param  func   任务函数
  73           * @param  delay  首次执行延时
  74           * @param  param func 入参
  75           * @param  period 周期执行间隔
  76           * @param  co_cp  合作/抢占标志
  77           * @return        任务ID [用于删除任务]
  78           */
  79          u8 hsch_add_task(Action func, void *param, u16 delay, u16 period, u8 co_cp)
  80          {
  81   1          u8 i = 0;
  82   1          while ((hsch_tasks[i].func != NULL) && (i < SCH_MAX_TASKS))
  83   1          {
  84   2              i += 1;
  85   2          }
  86   1          if (i == SCH_MAX_TASKS)
  87   1          {
  88   2              hsch_error_code = ERROR_SCH_TOO_MANY_TASKS;
  89   2              return SCH_MAX_TASKS;
  90   2          }
  91   1          hsch_tasks[i].func = func;
  92   1          hsch_tasks[i].delay = delay;
  93   1          hsch_tasks[i].period = period;
  94   1          hsch_tasks[i].co_cp = co_cp;
  95   1          hsch_tasks[i].runme = 0;
  96   1          hsch_tasks[i].exec_once = false;
  97   1          hsch_tasks[i].param = param;
  98   1          return i;
  99   1      }
 100          
 101          /**
 102           * 添加一个一次性任务
 103           * @param func 回调函数
 104           * @param para 函调函数的入参
 105           * @param co_cp 合作/抢占式
 106           */
 107          u8 hsc_once_task(Action func, void *param, u8 co_cp)
 108          {
 109   1          return hsch_add_task(func, param, 0, 0, co_cp);
 110   1      }
 111          
 112          /**
 113           * 删除任务
 114           * @param  i 任务ID
 115           * @return   删除状态
 116           */
C51 COMPILER V9.59.0.0   HYBSCH                                                            06/06/2021 18:00:00 PAGE 3   

 117          bool hsch_delete_task(const u8 i)
 118          {
 119   1          bool ret_code;
 120   1          if (hsch_tasks[i].func == NULL)
 121   1          {
 122   2              hsch_error_code = ERROR_SCH_CANNOT_DELETE_TASK;
 123   2              ret_code = RETURN_ERROR;
 124   2          }
 125   1          else
 126   1          {
 127   2              ret_code = RETURN_NORMAL;
 128   2          }
 129   1          hsch_tasks[i].func = NULL;
 130   1          hsch_tasks[i].delay = 0;
 131   1          hsch_tasks[i].period = 0;
 132   1          hsch_tasks[i].runme = 0;
 133   1          hsch_tasks[i].exec_once = false;
 134   1          hsch_tasks[i].param = NULL;
 135   1      
 136   1          return ret_code;
 137   1      }
 138          
 139          /**
 140           * 处理一些全局变量的更新
 141           */
 142          void hsc_handle_update(void)
 143          {
 144   1          if (soft_delay_count > 0)
 145   1          {
 146   2              soft_delay_count -= 1;
 147   2          }
 148   1          if (random_seeds == 0xFF)
 149   1          {
 150   2              random_seeds = 0;
 151   2          }
 152   1          random_seeds += 1;
 153   1      }
 154          
 155          /**
 156           * 执行调度任务扫描更新
 157           */
 158          void exec_hsc_update(void)
 159          {
 160   1          u8 i = 0;
 161   1          hsc_handle_update();
 162   1          for (i = 0; i < SCH_MAX_TASKS; i += 1)
 163   1          {
 164   2              if (hsch_tasks[i].func == NULL)
 165   2              {
 166   3                  continue;
 167   3              }
 168   2              if (hsch_tasks[i].delay > 0)
 169   2              {
 170   3                  hsch_tasks[i].delay -= 1;
 171   3                  continue;
 172   3              }
 173   2              // 非周期任务已经执行了一次就不能再执行了
 174   2              if (hsch_tasks[i].exec_once && hsch_tasks[i].period == 0)
 175   2              {
 176   3                  continue;
 177   3              }
 178   2              hsch_tasks[i].exec_once = true;
C51 COMPILER V9.59.0.0   HYBSCH                                                            06/06/2021 18:00:00 PAGE 4   

 179   2              //若是合作式则在中断中只置位,等待到hsch_dispatch_tasks中去执行
 180   2              if (hsch_tasks[i].co_cp)
 181   2              {
 182   3                  ++hsch_tasks[i].runme;
 183   3              }
 184   2              else
 185   2              {
 186   3                  // 抢占式任务直接执行
 187   3                  hsch_tasks[i].func(hsch_tasks[i].param);
 188   3                  if (hsch_tasks[i].period == 0)
 189   3                  {
 190   4                      hsch_delete_task(i);
 191   4                  }
 192   3              }
 193   2              //如果是周期执行则将周期间隔赋予下次执行的延时
 194   2              hsch_tasks[i].delay = hsch_tasks[i].period > 0 ? hsch_tasks[i].period : 0;
 195   2          }
 196   1      }
 197          
 198          #ifdef SCH_TASK_TIMER2
              /**
               * 更新调度器，周期由T2设置
               */
              void hsch_update(void) interrupt TIMMER2_ITRP
              {
                  TF2 = 0;
                  exec_hsc_update();
              }
              
              /**
               * 用Timmer2作为调度器的时钟源,默认1ms为周期
               */
              void hsch_init_timmer2(void)
              {
                  u8 i = 0;
                  for (i = 0; i < SCH_MAX_TASKS; i += 1)
                  {
                      hsch_delete_task(i);
                  }
                  hsch_error_code = 0;
              
                  T2CON = 0x04;
                  T2MOD = 0x00;
                  TH2 = 0xfc;
                  RCAP2H = 0xfc;
                  TL2 = 0x18;
                  RCAP2L = 0x18;
                  ET2 = 1;
                  TR2 = 1;
              }
              #else
 230          /**
 231           * 用 Timer1 作为调度器的时钟源，默认 1ms 为周期
 232           */
 233          void hsch_init_timmer1(void)
 234          {
 235   1          u8 i = 0;
 236   1          for (i = 0; i < SCH_MAX_TASKS; i += 1)
 237   1          {
 238   2              hsch_delete_task(i);
 239   2          }
 240   1          hsch_error_code = 0;
C51 COMPILER V9.59.0.0   HYBSCH                                                            06/06/2021 18:00:00 PAGE 5   

 241   1          TMOD &= 0x0F;
 242   1          TMOD |= 0x10; //16 位计数器模式
 243   1          ET1 = 1;
 244   1          TH1 = 0XFC;
 245   1          TL1 = 0X65;
 246   1          TF1 = 0;
 247   1          TR1 = 1;
 248   1      }
 249          /**
 250           * 更新调度器，周期由T1设置
 251           */
 252          void hsch_update(void) interrupt TIMMER1_ITRP
 253          {
 254   1          TF1 = 0;
 255   1          TH1 = 0XFC;
 256   1          TL1 = 0X65;
 257   1          exec_hsc_update();
 258   1      }
 259          #endif
 260          /**
 261           * 单片机开启休眠
 262           */
 263          void hsch_to_sleep(void)
 264          {
 265   1          PCON |= 0x01;
 266   1      }
 267          
 268          /**
 269           * 启动调度器
 270           */
 271          void hsch_start(void)
 272          {
 273   1          EA = 1;
 274   1      }
 275          
 276          /**
 277           * 输出调度器状态
 278           */
 279          void hsch_report_status(void)
 280          {
 281   1      #ifdef SCH_REPORT_STATUS
                  if (hsch_error_code != last_error_code)
                  {
                      ERROR_PORT = 0xff - hsch_error_code;
                      last_error_code = hsch_error_code;
                      if (hsch_error_code != 0)
                      {
                          error_tick_count = 6000;
                      }
                      else
                      {
                          error_tick_count = 0;
                      }
                  }
                  else
                  {
                      if (error_tick_count != 0)
                      {
                          if (--error_tick_count == 0)
                          {
                              hsch_error_code = 0;
                          }
C51 COMPILER V9.59.0.0   HYBSCH                                                            06/06/2021 18:00:00 PAGE 6   

                      }
                  }
              #endif
 306   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1048    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     48    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6      18
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
